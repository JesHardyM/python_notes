log = "July 31 07:51:48 mycomputer bad_process[12345]: ERROR Performing package upgrade"
index = log.index("[")
print(log[index+1:index+6])
            #Prints 12345

import re
log = "July 31 07:51:48 mycomputer bad_process[12345]: ERROR Performing package upgrade"
regex = r"\[(\d+)\]"
result = re.search(regex, log)
print(result[1])
            #Prints 123454

Here the re module is used which lets us use the search function to find regular expressions inside strings. 
Then, a regular expression is defined r"|[(\d+)\]", which matches a string enclosed in square brackets 
followed by one or more digits. Then, it uses the re.search() function to search the string log for a match
to the regular expression. The re.search() function returns a Match object if a match is found, or None if
no match is found. the re.search() function returns a Match object because the string log contains a match 
to the regular expression. The Match object has a group() method that returns the captured groups from the 
match. In this case, the only captured group is the number, which is returned by the result[1] expression.


123
import re
result = re.search(r"aza", "bazaar")
print(result)
                    #Returns: <re.Match object; span=(1, 4), match='aza'>


import re
result = re.search(r"aza", "maze")
print(result)

print(re.search(r"^x", "xenon"))

                #Returns: None
                #Returns: <re.Match object; span=(0, 1), match='x'>


import re
print(re.search(r"p.ng", "penguin"))
                #Returns: <re.Match object; span=(0, 4), match='peng'>


import re
print(re.search(r"p.ng", "clapping"))
print(re.search(r"p.ng", "sponge"))
                #Returns: <re.Match object; span=(4, 8), match='ping'>
                #Returns: <re.Match object; span=(1, 5), match='pong'>


import re
print(re.search(r"p.ng", "Pangaea", re.IGNORECASE))
               #Returns: <re.Match object; span=(0, 4), match='Pang'>


WILDCARDS AND CHARACTER CLASSES

import re
print(re.search(r"[Pp]ython", "Python"))
                #Returns: <re.Match object; span=(0, 6), match='Python'>


import re
print(re.search(r"[a-z]way", "The end of the highway"))
                <re.Match object; span=(18, 22), match='hway'>
print(re.search(r"[a-z]way", "What a way to go"))
                None
print(re.search("cloud[a-zA-Z0-9]", "cloudy"))
                <re.Match object; span=(0, 6), match='cloudy'>
print(re.search("cloud[a-zA-Z0-9]", "cloud9"))
                <re.Match object; span=(0, 6), match='cloud9'>

import re
print(re.search(r"[^a-zA-Z]", "This is a sentence with spaces."))
print(re.search(r"[^a-zA-Z ]", "This is a sentence with spaces."))
                <re.Match object; span=(4, 5), match=' '>
                <re.Match object; span=(30, 31), match='.'>
print(re.search(r"cat|dog", "I like cats."))
print(re.search(r"cat|dog", "I love dogs!"))
print(re.search(r"cat|dog", "I like both dogs and cats."))
                <re.Match object; span=(7, 10), match='cat'>
                <re.Match object; span=(7, 10), match='dog'>
                <re.Match object; span=(12, 15), match='dog'>
print(re.search(r"cat|dog", "I like cats."))
print(re.search(r"cat|dog", "I love dogs!"))
print(re.search(r"cat|dog", "I like both dogs and cats."))
print(re.findall(r"cat|dog", "I like both dogs and cats."))
                <re.Match object; span=(7, 10), match='cat'>
                <re.Match object; span=(7, 10), match='dog'>
                <re.Match object; span=(12, 15), match='dog'>
                ['dog', 'cat']


import re
print(re.search(r"Py.*n", "Pygmalion"))
                <re.Match object; span=(0, 9), match='Pygmalion'>
print(re.search(r"Py.*n", "Python Programming"))
                <re.Match object; span=(0, 17), match='Python Programmin'>
print(re.search(r"Py[a-z]*n", "Python Programming"))
                <re.Match object; span=(0, 6), match='Python'>
print(re.search(r"Py[a-z]*n", "Pyn"))
                <re.Match object; span=(0, 3), match='Pyn'>


import re
print(re.search(r"o+l+", "goldfish"))
                <re.Match object; span=(1, 3), match='ol'>
print(re.search(r"o+l+", "woolly"))
                <re.Match object; span=(1, 5), match='ooll'>
print(re.search(r"o+l+", "boil"))                
                None


import re
print(re.search(r"p?each", "To each their own"))
                <re.Match object; span=(3, 7), match='each'>
print(re.search(r"p?each", "I like peaches"))
                <re.Match object; span=(7, 12), match='peach'>


REPETITION QUALIFIERS

import re
def repeating_letter_a(text):
  result = re.search(r"(?i).*a.*a.*", text)
  return result != None

print(repeating_letter_a("banana")) # True
print(repeating_letter_a("pineapple")) # False
print(repeating_letter_a("Animal Kingdom")) # True
print(repeating_letter_a("A is for apple")) # True



ESCAPING QUALIFIERS

\ is an escape character.  using it \. will only return string that contains a . prior to the text

import re
print(re.search(r".com", "welcome"))
                <re.Match object; span=(2, 6), match='lcom'>
print(re.search(r"\.com", "welcome"))
                None
print(re.search(r"\.com", "mydomain.com"))
                <re.Match object; span=(8, 12), match='.com'>


\w matches any alpha-numeric character including slashes and underscores 

import re
print(re.search(r"\w*", "This is an example"))
                <re.Match object; span=(0, 4), match='This'>
print(re.search(r"\w*", "And_this_is_another"))
                <re.Match object; span=(0, 19), match='And_this_is_another'>

\d digits
\s for whitespace characters like space, tab, newline
\b for word boudaries
\w matches letters numbers and underscorse

Code to check if the text passed has at least 2 groups of alphanumeric characters 
(including letters, numbers, and underscores) separated by one or more whitespace characters:

import re
def check_character_groups(text):
result = re.search(r"\w+\s+\w+", text)
return result != None

print(check_character_groups("One")) # False
print(check_character_groups("123  Ready Set GO")) # True
print(check_character_groups("username user_01")) # True
print(check_character_groups("shopping_list: milk, bread, eggs.")) # False


import re
print(re.search(r"A.*a", "Argentina"))
print(re.search(r"A.*a", "Azerbaijan"))
print(re.search(r"^A.*a$", "Azerbaijan"))  the ^ and $ indicate that we want an answer only if begins and ends in a  
print(re.search(r"^A.*a$", "Australia"))

<re.Match object; span=(0, 9), match='Argentina'>
<re.Match object; span=(0, 9), match='Azerbaija'>
None
<re.Match object; span=(0, 9), match='Australia'>


import re
pattern = r"^[a-zA-Z_][a-zA-Z0-9_.]*$"
print(re.search(pattern, "_this_is_a_valid_variable_name"))
print(re.search(pattern, "this isn't a valid variable"))
print(re.search(pattern, "my_variable1"))
print(re.search(pattern, "2my_variable1"))
print(re.search(pattern, "_my_dog"))

<re.Match object; span=(0, 30), match='_this_is_a_valid_variable_name'>
None
<re.Match object; span=(0, 12), match='my_variable1'>
None
<re.Match object; span=(0, 7), match='_my_dog'>


import re

def check_sentence(text):
    result = re.search(r"[A-Za-z]+[.!?]$", text)
    return result is not None

print(check_sentence("Is this is a sentence?"))  # True
print(check_sentence("is this is a sentence?"))  # False
print(check_sentence("Hello"))  # False
print(check_sentence("1-2-3-GO!"))  # False


HOW TO CHECK IF A SENTENCE BEGINS WITH A CAPITAL LETTER, FOLLOWED BY LOWER CASE LETTERS, SPACES, WORDS IN LOWERCASE
AND ENDS IN ! . ?

import re

def check_sentence(text):
    result = re.search(r"^[A-Z][a-z]*(?: [a-z]+)*[.!?]$", text)
    return result is not None
print(check_sentence("Is this is a sentence?")) # True
print(check_sentence("is this is a sentence?")) # False
print(check_sentence("Hello")) # False
print(check_sentence("1-2-3-GO!")) # False
print(check_sentence("A star is born.")) # True

-----------------------------------------------------------------------------------------
