git config --global user.email "me@example.com"
git config --global user.name "My name"

mkdir checks
cd checks
git init

Result: Initialized empty Git repository in /home/user/checks/.git/

ls -la


ls -l


ls -l .git/


cp ../disk_usage.py .
ls -l


git add disk_usage.py 
git status

        Result:On branch master
        No commits yet
        Changes to be committed:
        (use "git rm --cached <file>..." to unstage)
	    new file:   disk_usage.py


git commit

git commit -m 'Add periods to the end of sentences.'

git status
        OUTPUT: On branch master
        nothing to commit, working tree clean


________________________________________---

Study guide: Git
In any Git project, there are three sections: the Git directory, the working tree, and the staging area. This study guide provides some basic concepts and commands that can help you get started with Git as well as guidelines to help you write an effective commit message.

Git config command
The Git config command is used to set the values to identify who made changes to Git repositories. To set the values of user.email and user.name to your email and name, type: 

: ~$ git config  - -global user.email “
me@example.com
”

: ~$ git config  - -global user.name “My name”

Git init command
: ~/checks$ git init

The Git init command can create a new empty repository in a current directory or re-initialize an existing one. 

Git ls -la command
: ~/checks$ ls -la

The Git ls - la command checks that an identified directory exists.

: ~/checks$ ls -l .git/

The ls-l.git command checks inside the directory to see the different things that it contains. This is called the Git directory. The Git directory is a database for your Git project that stores the changes and the change history.

Git add command
:~/checks$ git add disk_usage.py

Using the Git add command allows Git to track your file and uses the selected file as a parameter when adding it to the staging area. The staging area is a file maintained by Git that contains all the information about what files and changes are going to go into your next commit.

Git status command
:~/checks$ git status

The Git status command is used to get some information about the current working tree and pending changes.

Git commit command
:~/checks$ git commit

The .git commit command is run to remove changes made from the staging area to the .git directory. When this command is run, it tells Git to save changes. A text editor is opened that allows a commit message to be entered.

Guidelines for writing commit messages
A commit message is generally broken into two sections: a short summary and a description of the changes. When the git commit command is run, Git will open a text editor to write your commit message. A good commit message includes the following:

Summary: The first line contains the summary, formatted as a header, containing 50 characters or less. 

Description: The description is usually kept under 72 characters and provides detailed information about the change. It can include references to bugs or issues that will be fixed with the change. It also can include links to more information when relevant. 

Click the link to review an example of a commit message: 
https://commit.style/
 

Key takeaways
Knowing basic Git commands and guidelines for writing better messages can help you get started with Git as well as better communicate with others.


Study guide: Advanced Git

Command

Explanation & Link

git commit -a

$ git commit -a
 automatically stages the files that have been locally modified. New files which have not been published yet are not affected.

git log -p

$ git log -p
 produces patch text. A patch file is used to share your local changes with others without pushing your changes to the main branch of the repo.

git show

$ git show
 shows you one or more object(s) such as blobs, trees, tags, and commits.

git diff

$ git diff
 is similar to the Linux `diff` command, and can show the changes between commits, changes between the working tree and index, changes between two trees, changes from a merge, and so on.

git diff --staged

$ git diff --staged
 is an alias of $ git diff --cached, which  shows all staged files compared to the named commit.

git add -p

$ git add -p
 allows a user to interactively review patches before adding to the current commit.

git mv

$ git mv
 is similar to the Linux `mv` command. This command can move or rename a file, directory, or symlink.

git rm

$ git rm 
is similar to the Linux `rm` command. This command deletes or removes a file from the working tree.

There are many useful git command summaries online as well. Please take some time to research and study a few, such as 
this one
.

.gitignore files
.gitignore files are used to tell the git tool to intentionally ignore some files in a given Git repository. For example, this can be useful for configuration files or metadata files that a user may not want to check into the master branch. 

When writing a .gitignore file, there are some specific formats which help tell Git how to read the text in the file. For example, a line starting with # is a comment; a slash / is a directory separator. Visit
 https://git-scm.com/docs/gitignore
 to see more examples.

This GitHub repository
 offers some examples of configurations which are often included in a .gitignore file. These examples include: compiled sources, packages, logs, databases, and OS generated files.



git commit -a -m "Call check_reboot from main, exit with 1 on error"  Stages and Commits the change.
    Git commit -a doesn't work on new files because those are untracked. 
    Instead, git commit -a is a shortcut to stage any changes to tracked files and commit them 
    in one step. If the modified file has never been committed to the repo, we'll still need to 
    use git add to track it first.

git log -p  allows a user to patch a log

git log --stat  shows the status of the log/changes/etc

git rm process.py  removes process.py

git checkout restores files to the latest stored snapshot, reverting any changes before staging.

git reset Unstages changes that we don´t want to commit

git commit --amend, git will take whatever is currently in our staging area 
    and run the git commit workflow to overwrite the previous commit

git revert Creates a new commit that contains the inverse of all the changes made in the bad commit 
    in order to cancel them out. For example, if a particular line was added in the bad commit, 
    then in the reverted commit, the same line will be deleted.


Study guide: Git Revert
When writing and committing code, making mistakes is a common occurrence. Thankfully, there are multiple ways for you to revert or undo your mistakes. Take a look at the helpful commands below.

git checkout
 is used to switch branches. For example, you might want to pull from your main branch. In this case, you would use the command git checkout main. This will switch to your main branch, allowing you to pull. Then you could switch to another branch by using the command  git checkout <branch>.

git reset
  can be somewhat difficult to understand. Say you have just used the command git add. to stage all of your changes, but then you decide that you are not ready to stage those files. You could use the command git reset to undo the staging of your files.

There are some other useful articles online, which discuss more aggressive approaches to
 resetting the repo
 (Git repository). As discussed in this article, doing a hard reset can be extremely dangerous. With a hard reset, you run the risk of losing your local changes. There are safer ways to achieve the same effect. For example, you could run git stash, which will temporarily shelve or stash your current changes. This way, your current changes are kept safe, and you can come back to them if needed.

git commit --amend
 is used to make changes to your most recent commit after-the-fact, which can be useful for making notes about or adding files to your most recent commit. Be aware that this git --amend command rewrites and replaces your previous commit, so it is best not to use this command on a published commit.

git revert
 makes a new commit which effectively rolls back a previous commit. Unlike the git reset command which rewrites your commit history, the git revert command creates a new commit which undoes the changes in a specific commit. Therefore, a revert command is generally safer than a reset command.

For more information on these and other methods to undo something in Git, checkout this 
Git Basics - Undoing Things
 article.

Additionally, there are some interesting considerations about how git object data is stored, such as the usage of SHA-1.

SHA-1 is what’s known as a hash function, a cryptographic function that generates a digital fingerprint of a file. Theoretically, it’s impossible for two different files to have the same SHA-1 hash, which means that SHA-1 can be used for two things:

Confirming that the contents of a file have not changed (digital signature).

Serving as an identifier for the file itself (a token or fingerprint).

Git calculates a hash for every commit. Those hashes are displayed by commands like git log or in various pages on Github. For commands like git revert, you can then use the hash to refer to a specific commit.

Command

Explanation & link

git branch

 
$ git branch
 can be used to list, create, or delete branches.

git branch <name>

$ git branch <name>
 can be used to create a new branch in your repository. 

git branch -d <name>

$ git branch -d <name>
 can be used to delete a branch from your repository.

git branch -D <name>

$ git branch -D <branch>
 forces a branch to be deleted.

git checkout <branch>

$ git checkout <branch>
 switches your current working branch.

git checkout -b <new-branch>

$ git checkout -b <new-branch>
 creates a new branch and makes it your current working branch. 

git merge <branch>

$ git merge <branch>
 joins changes from one branch into another branch.

git merge --abort

 
$ git merge --abort
 can only be used after merge conflicts. This command will abort the merge and try to go back to the pre-merge state.

git log --graph 

$ git log --graph 
prints an ASCII graph of the commit and merge history.

git log --oneline

$ git log --oneline
 prints each commit on a single line.

 git remote 

$ git remote
 allows you to manage the set of repositories or “remotes” whose branches you track.

git remote -v

$ git remote -v
 is similar to $ git remote, but adding the -v shows more information such as the remote URL.

git remote show <name>

$ git remote show <name>
 shows some information about a single remote repo.

git remote update

$ git remote update
 fetches updates for remotes or remote groups.

git fetch
$ git fetch
 can download objects and refs from a single repo, a single URL, or from several repositories at once.

git branch -r

$ git branch -r
 lists remote branches and can be combined with other branch arguments to manage remote branches.





