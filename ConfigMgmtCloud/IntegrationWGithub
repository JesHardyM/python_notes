
Integration with Github
GitHub is one of the most important platforms for Continuous Integration (CI) because it is the most popular site for hosting and collaborating code projects.

In order to build your project on GitHub, a CI server needs to fetch your code and other artifacts such as configuration files from source control. The exact details vary depending on the CI system in use, but the basic outline is this:

Log into GitHub and go to the 
personal access tokens (classic) page
.

From the Generate new token drop-down menu, select Generate new token (classic).

Give the token a name and select the permissions your CI system needs (these will usually be listed in the CI system documentation).

Click Generate token. Make sure you save the token. It will only be displayed once.

Provide your GitHub username and the token to your CI system.

After you have integrated the two, the CI system will watch your GitHub project for new code commits. Usually this means watching for three types of events:

Commits to the master branch.

Commits to an alternative branch.

Pull requests being merged into master or another branch.

These events can trigger the CI system to fetch the latest code and run the CI pipeline in that branch. 

Webhooks
GitHub is able to notify CI tools about code changes through webhooks. A webhook is a URL provided to GitHub by the CI system. GitHub will send an HTTP request to the webhook URL whenever certain events happen in the GitHub repository (such as the three scenarios outlined above). GitHub will pass certain information in the HTTP request that informs the CI system of the commit.

Usually the CI system will use your GitHub API token to add the webhooks to your GitHub project for you. In some cases, they will provide instructions and a webhook URL that you can paste into GitHub yourself.

GitHub’s status checks
GitHub’s status checks notify you if your commits meet the conditions set for the repository to which you’re contributing. A status check is a GitHub API feature that allows an external CI system to mark a pipeline as pending, succeeded, or failed.

A single pipeline may create several status checks in GitHub. For example:

Build - succeeded

Unit tests - succeeded

Integration tests - pending

Security scan - pending

GitHub will display the status checks on the appropriate commit or branch, so that you can watch the status of the pipeline without having to find it in the CI tool. For an example of what status checks look like, see 
About status checks
.

Key takeaways
CI with GitHub benefits developers and the community. After you have integrated with GitHub, the CI system will watch your GitHub project for new code commits. GitHub communicates changes with the CI system through webhooks. You can review the status checks to see if your commits meet the conditions.


Github and delivery
GitHub can facilitate your efforts in Continuous Integration and Continuous Delivery (CI/CD). Learning about how to utilize this repository will benefit you down the road.

How GitHub supports CI/CD
GitHub supports external CI/CD tools by providing webhooks and APIs that allow those tools to become part of the pull request process. For example, GitHub can be set up to refuse to merge a pull request until several actions are completed:

The PR is reviewed and signed off by one or more code reviewers.

The CI build process completes successfully.

The CI test suites run successfully.

The PR submitter has acknowledged the project’s license, standards, and/or code of conduct.

The feature of GitHub that automates CI/CD is called GitHub Actions.

GitHub Actions
GitHub Actions is a feature of GitHub that allows you to run tasks whenever certain events occur in your code repository. With GitHub Actions, you are able to trigger any part of a CI/CD pipeline off any webhook on GitHub. 

To get started with GitHub Actions, go to the Actions tab in the GitHub repository. When opening the tab for the first time, you’ll find a description of GitHub Actions and some suggested workflows for your repository. These workflows build the code in your repository and run your tests either on GitHub-hosted virtual machines or on your own machines. You’ll receive the results of the tests in the pull request.

GitHub Actions has more than 13,000 pre-written and tested CI/CD workflows. If you would like to write your own workflows or customize an existing one, you can do it using YAML files. 

Because GitHub Actions is a general-purpose engine that runs tasks in response to events in the repository, you can use it for more than just CI/CD pipelines. Some examples:

Running a nightly build in the master branch for testing.

Cleaning up old issues or bug reports.

Creating a full-fledged bot that responds to comments or commands on a PR or issue. (“Issues” are like bug reports or support tickets.)

Key takeaways
GitHub Actions supports your CI/CD. It offers workflows that you can use right away or customize for your own repository. 



