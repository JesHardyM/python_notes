

The task is to generate reports via syslog analysis using regular expressions.
How this will be accomplished:
    Use regex to parse a log file
    Append and modify values in a dictionary
    Write to a file in CSV format
    Move files to the appropriate directory for use with the CSV->HTML converter

You'll write some automation scripts that will process the system log in a file named syslog.log  
    generate a bunch of reports using regular expressions based on the information extracted 
    from log files. we want to find some specific log lines in the sy log file. 
    We strongly recommend that you use regular expressions to find them.

When the service runs correctly, it logs an info message to syslog, stating 
    what it's done, the username, and the ticket number related to the event.
If the service encounters a problem, it logs an error message to the syslog, 
    indicating what was wrong and the username that triggered the action that 
    caused the problem.

The developers of the service want two different reports out of this data. 

The first one is a ranking of errors generated by the system. 
    This means a list of all error messages logged, and how many times each of them was found, 
    not taking into account the users involved. They should be sorted by the most common error 
    to the least common error.

The second one is a usage statistics for the service. This means, a list of all users that 
    have used the system including how many info messages and how many error messages they've 
    generated.This report should be sorted by username.

You'll want to use a couple of different dictionaries. 
    One to account error messages and another to count per user usage. 
    You'll then need to sort the data in the dictionaries by different criteria.

The output of your Python script should be a couple of CSV files. 
    Each of them containing the names of the columns and the data in the order that it 
    needs to be presented.

The objective here is to generate a couple of webpages (html files) that'll be served by a web server running on 
    the machine. To do this, you can make use of a script that's already in the system called csv_ to_html.py.
    The key is to pass two parameters to the script.
        (This script converts the data in a CSV file into an HTML file containing a table with the data.) 
    
    The name of the CSV file to read and the name of the HTML 
    file generator. You could do this last step from either a Python script or a bash script. 
    Since the script will be only calling commands and moving files, we recommend doing a bash.




Then, put the files in the directory that's used by the webserver to display the web pages.

Splitting the task so that each piece can be written and tested separately.



#!/usr/bin/env python3

import re
import operator
import csv

# number of different error messages
errors ={}
#each user (splitting between INFO and ERROR).
per_user = {}

with open("syslog.log") as file:
    logs = file.readlines()
    for log in logs:
        match = re.search(r"ticky: (INFO|ERROR) (.*) \((.*)\)", log.strip())
        if match != None:
            log_type = match.group(1)
            username = match.group(3).strip()
            message = match.group(2).strip()
            (old_info,old_error) = per_user.get(username,(0,0))
            if log_type == 'ERROR':
                errors[message] = errors.get(message,0)+1
                old_error +=1
            else:
                old_info +=1
      
            per_user[username] = (old_info,old_error)
file.close()    


errors = sorted(errors.items(), key = operator.itemgetter(1), reverse=True)
per_user = [(key,val[0],val[1])for key, val in sorted(per_user.items(), key = operator.itemgetter(0))] 

with open("error_message.csv", 'w+') as errors_file:   
    writer = csv.writer(errors_file)
    writer.writerow(("Error", "Count"))
    writer.writerows(errors)
errors_file.close()

with open("user_statistics.csv", 'w+') as users_file:   
    writer = csv.writer(users_file)
    writer.writerow(("Username", "INFO", "ERROR"))
    writer.writerows(per_user)
users_file.close()    